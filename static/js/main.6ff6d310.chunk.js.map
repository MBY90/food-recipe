{"version":3,"sources":["recepies.module.css","recepie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recepie","title","calories","image","ingredients","className","Style","recepies","map","ingredient","text","src","alt","App","useState","setRecepies","search","setSearch","query","setQuery","useEffect","a","axios","get","data","hits","fetchData","onSubmit","e","preventDefault","type","value","onChange","target","recepie","key","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6JACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,MAAQ,0B,2ICoBjDC,EAnBD,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,YACrC,OAEI,yBAAKC,UAAWC,IAAMC,UAChB,4BAAKN,GACL,4BACFG,GAAeA,EAAYI,KAAI,SAAAC,GAAU,OACrC,4BACOA,EAAWC,UAKxB,2BAAIR,GACJ,yBAAMG,UAAWC,IAAMH,MAAMQ,IAAKR,EAAOS,IAAI,c,iBCsCpCC,EAlDL,WACR,IADY,EAGmBC,mBAAS,IAH5B,mBAGNP,EAHM,KAGIQ,EAHJ,OAIaD,mBAAS,IAJtB,mBAINE,EAJM,KAIEC,EAJF,OAKUH,mBAAS,WALnB,mBAKNI,EALM,KAKAC,EALA,KAMbC,qBAAU,YAEO,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IAAN,0CACiBL,EADjB,mBARR,WAQQ,oBAPP,qCAMK,OACXM,EADW,OAKjBT,EAAYS,EAAKA,KAAKC,MALL,2CAAH,qDASfC,KAAe,CAACR,IAWlB,OACI,yBAAMb,UAAU,OACf,0BAAMsB,SAPK,SAAAC,GAEjBA,EAAEC,iBACFV,EAASH,IAIwBX,UAAU,eACnC,2BAAOA,UAAU,aAAYyB,KAAK,OAAOC,MAAOf,EAAQgB,SAZ3C,SAAAJ,GAErBX,EAAUW,EAAEK,OAAOF,UAWX,4BAAQ1B,UAAU,gBAAgByB,KAAK,UAAvC,WAGR,yBAAKzB,UAAU,YACRE,GAAWA,EAASC,KAAI,SAAA0B,GAAO,OACtC,kBAAC,EAAD,CACAC,IAAKD,EAAQE,OAAOC,MACpBpC,MAAOiC,EAAQE,OAAOC,MACtBnC,SAAUgC,EAAQE,OAAOlC,SACzBC,MAAO+B,EAAQE,OAAOjC,MACtBC,YAAa8B,EAAQE,OAAOhC,oBClCRkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6ff6d310.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recepies\":\"recepies_recepies__uRM_p\",\"image\":\"recepies_image__D7sy3\"};","import React from 'react'\r\nimport Style from './recepies.module.css'\r\nconst Recepie=({title,calories,image,ingredients})=>{\r\nreturn (\r\n\r\n    <div className={Style.recepies} >\r\n          <h1>{title}</h1>\r\n          <ol>\r\n       {ingredients && ingredients.map(ingredient=>(\r\n            <li>\r\n                  {ingredient.text}\r\n            </li>\r\n            ))}         \r\n          </ol>\r\n      \r\n      <p>{calories}</p>\r\n      <img  className={Style.image}src={image} alt='bla bla'/>\r\n\r\n       </div>\r\n);\r\n}\r\nexport default Recepie ;\r\n","import React, { useState, useEffect } from \"react\";\nimport './App.css'\nimport Recepie from './recepie'\nimport axios from \"axios\";\nconst App=()=>{\n  const APP_ID='10d14ae2';\n  const APP_KEY='e2fe97c9089d2fabcfb3757b1f9d11ea';\n const [recepies, setRecepies] = useState([]);\n const [search, setSearch]=useState(\"\");\n const [query,setQuery]=useState(\"chicken\");\n useEffect(() => {\n\n   const fetchData = async () => {\n    const data = await axios.get(\n     `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n   \n    setRecepies(data.data.hits);\n  \n\n  };\n   fetchData();}, [query]);\n\n const updateSearsh =e=>\n {\nsetSearch(e.target.value);\n }\n const getSearsh=e=>\n {\ne.preventDefault();\nsetQuery(search);\n }\n return (  \n     <div  className=\"App\">\n      <form onSubmit={getSearsh} className=\"search-form\">\n        <input className=\"search-bar\"type=\"text\" value={search} onChange={updateSearsh}/>\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n\n<div className=\"recepies\">\n      {recepies &&recepies.map(recepie=>(\n<Recepie\nkey={recepie.recipe.label}\ntitle={recepie.recipe.label} \ncalories={recepie.recipe.calories} \nimage={recepie.recipe.image}\ningredients={recepie.recipe.ingredients}/>\n\n      ))}\n      </div>\n       </div>\n\n );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}